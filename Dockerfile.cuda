# Purpose: CUDA-enabled JupyterLab with NVIDIA branding and GPU monitoring
# Inputs: ARG CUDA_VERSION for base image selection (11.8, 12.1)
# Outputs: Multi-CUDA variant container images
# Assumptions: NVIDIA Docker runtime available on host  
# Notes: Builds on nvidia/cuda base with Python/pip for Jupyter stack

ARG CUDA_VERSION=12.1
ARG UBUNTU_VERSION=22.04

FROM nvidia/cuda:${CUDA_VERSION}.0-runtime-ubuntu${UBUNTU_VERSION} AS base

USER root

# Install system dependencies and Python
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 \
        python3-pip \
        python3-dev \
        git \
        wget \
        curl \
        ca-certificates \
        build-essential \
        nodejs \
        npm && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set up Python environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH=/usr/local/bin:$PATH

# Create jovyan user (OpenShift compatible)
ARG NB_USER=jovyan
ARG NB_UID=1000
ARG NB_GID=100
ENV NB_USER=${NB_USER} \
    NB_UID=${NB_UID} \
    NB_GID=${NB_GID} \
    HOME=/home/${NB_USER}

# Create user/group with VERY permissive OpenShift-compatible permissions
# OpenShift runs with arbitrary UID and GID 0 (root group)
# All permissions MUST be set at build-time (runtime chmod doesn't work)
# Strategy: Be OVERLY permissive to guarantee compatibility everywhere
RUN if ! getent group ${NB_GID} > /dev/null 2>&1; then \
        groupadd --gid ${NB_GID} ${NB_USER}; \
    fi && \
    useradd --uid ${NB_UID} --gid ${NB_GID} --create-home --shell /bin/bash --no-log-init ${NB_USER} && \
    mkdir -p ${HOME}/work ${HOME}/.jupyter ${HOME}/.local ${HOME}/.cache && \
    # Set ownership to GID 0 (root group) for OpenShift arbitrary UID support
    chown -R ${NB_USER}:0 ${HOME} && \
    # Use 777 permissions on home directory and subdirs for maximum compatibility
    chmod -R 777 ${HOME} && \
    # SetGID bit ensures new files inherit group ownership
    find ${HOME} -type d -exec chmod g+s {} \;

# Install JupyterLab and core extensions
# Set Node.js options for build process (increase memory limit)
ENV NODE_OPTIONS="--max-old-space-size=4096"

RUN python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel && \
    python3 -m pip install --no-cache-dir \
        jupyterlab \
        notebook \
        ipykernel \
        ipywidgets \
        jupyterlab-nvdashboard \
        nvidia-ml-py3 \
        jupyterlab-tour \
        jupyter_kernel_gateway && \
    # Build JupyterLab to integrate extensions (fixes 404s on remoteEntry.js files)
    # Use --dev-build for faster builds, skip minimize to avoid memory issues
    echo "Attempting JupyterLab build..." && \
    (jupyter lab build --dev-build=True --minimize=False 2>&1 || \
    echo "WARNING: JupyterLab build failed - extensions installed but may show 404 warnings") && \
    echo "JupyterLab build step completed"

# Copy all assets
COPY assets/ /opt/nvidia-assets/
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Create Jupyter config directories
RUN mkdir -p \
        ${HOME}/.jupyter/lab/user-settings/@jupyterlab/apputils-extension \
        ${HOME}/.jupyter/lab/user-settings/@jupyterlab/application-extension \
        ${HOME}/.jupyter/lab/user-settings/jupyterlab-tour \
        /usr/local/share/jupyter/lab/settings \
        /etc/jupyter/labconfig \
        /etc/jupyter

# Copy configuration files
RUN cp /opt/nvidia-assets/themes.jupyterlab-settings \
        ${HOME}/.jupyter/lab/user-settings/@jupyterlab/apputils-extension/themes.jupyterlab-settings && \
    cp /opt/nvidia-assets/notification.jupyterlab-settings \
        ${HOME}/.jupyter/lab/user-settings/@jupyterlab/apputils-extension/notification.jupyterlab-settings && \
    cp /opt/nvidia-assets/overrides.json \
        /usr/local/share/jupyter/lab/settings/overrides.json && \
    cp /opt/nvidia-assets/jupyter_server_config.py \
        /etc/jupyter/jupyter_server_config.py && \
    cp /opt/nvidia-assets/page_config.json \
        /etc/jupyter/labconfig/page_config.json && \
    cp /opt/nvidia-assets/user-tours.jupyterlab-settings \
        ${HOME}/.jupyter/lab/user-settings/jupyterlab-tour/user-tours.jupyterlab-settings && \
    echo '{"documentTitle": "Pyrrhus Lab"}' > \
        ${HOME}/.jupyter/lab/user-settings/@jupyterlab/application-extension/page-config.jupyterlab-settings

# Apply NVIDIA branding
COPY assets/apply-branding.sh /opt/nvidia-assets/apply-branding.sh
RUN chmod +x /opt/nvidia-assets/apply-branding.sh && \
    /opt/nvidia-assets/apply-branding.sh

# Disable default tour extensions
RUN jupyter labextension disable "jupyterlab-tour:notebook-tours" 2>/dev/null || true && \
    jupyter labextension disable "jupyterlab-tour:default-tours" 2>/dev/null || true

# Final AGGRESSIVE OpenShift permissions (BUILD-TIME ONLY - runtime chmod fails)
# Strategy: Make EVERYTHING world-writable to guarantee it works everywhere
# Apply to ALL directories that need to be writable by arbitrary UID with GID 0
RUN chown -R ${NB_USER}:0 ${HOME} /usr/local /etc/jupyter && \
    # World-writable on home directory (OpenShift safe with PodSecurityPolicies)
    chmod -R 777 ${HOME} && \
    # Group-writable on system directories (more conservative but still permissive)
    chmod -R g+rwX /usr/local/lib/python*/site-packages /etc/jupyter && \
    # SetGID on all directories so new files inherit group ownership
    find ${HOME} -type d -exec chmod g+s {} \; && \
    find /usr/local/lib/python* -type d -exec chmod g+s {} \; && \
    find /etc/jupyter -type d -exec chmod g+s {} \; && \
    # Also make /tmp world-writable (usually default but ensure it)
    chmod 1777 /tmp && \
    # Verify permissions are correct
    ls -la ${HOME} && \
    echo "Build-time permissions set: AGGRESSIVE - 777 on home, g+rwX on system dirs"

# Add start-notebook.sh script (group-executable)
RUN printf '#!/bin/bash\nset -e\nexec jupyter lab "$@"\n' > /usr/local/bin/start-notebook.sh && \
    chmod 755 /usr/local/bin/start-notebook.sh

# Don't set WORKDIR - let entrypoint.sh handle it dynamically based on permissions
# This allows fallback to /tmp/work if needed

USER ${NB_USER}

# Expose JupyterLab port
EXPOSE 8888

# Environment variables
ENV JUPYTER_ENABLE_LAB=yes \
    SHELL=/bin/bash \
    JUPYTER_PORT=8888

# Add CUDA version label
ARG CUDA_VERSION
LABEL cuda.version="${CUDA_VERSION}" \
      org.opencontainers.image.title="Pyrrhus JupyterLab with CUDA ${CUDA_VERSION}" \
      org.opencontainers.image.description="NVIDIA-branded JupyterLab with GPU dashboards and CUDA ${CUDA_VERSION} support" \
      org.opencontainers.image.vendor="Pyrrhus"

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["start-notebook.sh"]
